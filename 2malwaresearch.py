#!/usr/bin/python
# -*- coding: UTF-8 -*-

from bs4 import BeautifulSoup
import urllib2
import sys
import time
import argparse
import os

parser = argparse.ArgumentParser(description='MalwareSearch 0.1\t[github.com/MalwareReverseBrasil/malwaresearch.git]')
parser.add_argument('-f','--find',required=True,help='Enter your search via MD5, SHA1, SHA256 or an Common Signature name.',action='store')
parser.add_argument('-w','--write',help='',action='store')
parser.add_argument('-o','--output',help='',action='store',type = int)
parser.add_argument('-d','--download',help='',action='store')
parser.add_argument('-hs','--hash',help='',action='store')

args = parser.parse_args()

if (args.write != None):
    sys.stdout = open(args.write,'w')

t1 = time.time()

if args.find:
    host = 'http://openmalware.org'
    address = '/search.cgi?search=' 
    malfind = args.find
    site = host+address+malfind

def download(url):
    print('Starting MalwareSearch ...')
    try:
        html = urllib2.urlopen(url).read()
    except urllib2.URLError as e:
        print ('Sorry, download error:', e.reason)
        html = None
    return html


url = download(site)
soup = BeautifulSoup(url,'lxml')

try:
    founds = soup.find('h3').string
except:
    print('Error: Search too short')
    sys.exit(0)

print('\n\t\t' + founds + '\n')
print('This is the first result!\n')

if (args.output != None):
    outnumber = args.output
else:
    outnumber = 1

for i in range(0,(5*(outnumber))):

       try:
            #name = soup('b')[i].string
            tr = soup(attrs={'id':'checksum'})[i]

       except:
            pass

       validacao = tr.text.strip('\n')

       if (len(validacao) == 64) and (validacao.count(' ',0,len(validacao)) == 0):
            for j in range(-3,3):
                try:
                    tr = soup(attrs={'id':'checksum'})[i-j]
                except:
                    pass
                area = tr.text.strip('\n')

                if (j == 2):
                    md5 = 'MD5:\t\t\t' + area
                    print(md5)
                    break

                elif (j == 1):
                    sha1 = 'SHA1:\t\t\t' + area
                    print(sha1)

                elif (j == 0):
                    sha256 = 'SHA256:\t\t\t' + area
                    print(sha256)

                elif (j == -1):
                    ocid = 'OCID:\t\t\t' + area
                    print(ocid)

                elif (j == -2):
                    orifile = 'Original Filename:\t' + area
                
                    if (args.write != None):
                        print(orifile)
                    else:
                        print('\033[1;32m' + orifile + '\033[0m')
                elif (j == -3):
                        td1 = soup.find(text='Added:').findNext('td').string.strip('\n')
                        added = 'Added:\t\t\t' + td1
                        print('\n'+added)
    
t2 = time.time()
total_time = t2-t1
print('\n\nTotal search time %.2f seconds' %total_time)
